name: learn-github-actions
on: [push]
jobs:
  cppcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - run: sudo apt-get update -y
      - run: sudo apt-get install -y cppcheck
      - run: cppcheck main.c parallel.c consistent.c
  cppcheck_and_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - run: sudo apt-get update -y
      - run: sudo apt-get install -y cppcheck
      - run: cppcheck main.c parallel.c consistent.c
      - run: sudo apt-get install -y cmake
      - run: cmake -B build
      - run: cd build
      - run: cmake --build .
  unit_tests_valgrind_gcovr:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - run: pwd
      - run: valgrind --trace-children=yes --leak-check=full --show-leak-kinds=all --child-silent-after-fork=yes ./tests_gcovr_cons
      - run: valgrind --trace-children=yes --leak-check=full --show-leak-kinds=all --child-silent-after-fork=yes ./tests_gcovr_parall
      - run: gcovr -r .. .
  stress_test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Stress test
        uses: actions/checkout@v2
      - run: gcc generate_long_input.c -o gen_rand
      - run: ./gen_rand
      - run: ./build/main_consistent long_input > temp_output
      - run: ./build/main_parallel long_input >> temp_output &&
      - run: cat temp_output | grep time -B1
      - run: cat temp_output | grep output | awk '{print $2,$3}' | tr '\n' ' '| awk '$1 == $3 && $2 == $4 { print "----\nРезультат работы обеих программ одинаков"}'
  # unit_tests:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v1
  #     - run: npm install -g bats
  #     - run: bats -v
